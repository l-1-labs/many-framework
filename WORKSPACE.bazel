load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "rules_rust",
    sha256 = "324c2a86a8708d30475f324846b35965c432b63a35567ed2b5051b86791ce345",
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/0.13.0/rules_rust-v0.13.0.tar.gz"],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

RUST_VERSION = "nightly"

rust_register_toolchains(
    edition = "2021",
    iso_date = "2022-11-13",
    version = RUST_VERSION,
)

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

# Generate `rust-analyser` "rust-project.json"
load("@rules_rust//tools/rust_analyzer:deps.bzl", "rust_analyzer_dependencies")

rust_analyzer_dependencies()

load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_repository")

crates_repository(
    name = "crate_index",
    # The following annotations are needed to prevent Bazel passing incompatible C/CXX flags when coverage is enabled
    # https://github.com/bazelbuild/rules_rust/issues/1550
    annotations = {"librocksdb-sys": [crate.annotation(
        build_script_env = {
            "CRATE_CC_NO_DEFAULTS": "",
            "CFLAGS": "",
            "CXXFLAGS": "",
            "LDFLAGS": "",
        },
    )]},
    cargo_lockfile = "//:Cargo.Bazel.lock",
    lockfile = "//:cargo-bazel-lock.json",
    manifests = [
        "//:Cargo.toml",
        "//src/http_proxy:Cargo.toml",
        "//src/idstore-export:Cargo.toml",
        "//src/kvstore:Cargo.toml",
        "//src/ledger:Cargo.toml",
        "//src/ledger-db:Cargo.toml",
        "//src/many-abci:Cargo.toml",
        "//src/many-kvstore:Cargo.toml",
        "//src/many-ledger:Cargo.toml",
    ],
    rust_version = RUST_VERSION,
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()
